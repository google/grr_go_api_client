// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grr/proto/analysis.proto

/*
Package analysis is a generated protocol buffer package.

It is generated from these files:
	grr/proto/analysis.proto

It has these top-level messages:
	Sample
	SampleFloat
	Graph
	GraphFloat
	Event
*/
package analysis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import jobs "github.com/google/grr_go_api_client/grrproto/grr/proto/jobs_proto"
import _ "github.com/google/grr_go_api_client/grrproto/grr/proto/semantic_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A graph is a way to represent data.
type Sample struct {
	Label            *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	XValue           *uint64 `protobuf:"varint,2,opt,name=x_value,json=xValue" json:"x_value,omitempty"`
	YValue           *uint64 `protobuf:"varint,3,opt,name=y_value,json=yValue" json:"y_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Sample) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Sample) GetXValue() uint64 {
	if m != nil && m.XValue != nil {
		return *m.XValue
	}
	return 0
}

func (m *Sample) GetYValue() uint64 {
	if m != nil && m.YValue != nil {
		return *m.YValue
	}
	return 0
}

type SampleFloat struct {
	Label            *string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	XValue           *float32 `protobuf:"fixed32,2,opt,name=x_value,json=xValue" json:"x_value,omitempty"`
	YValue           *float32 `protobuf:"fixed32,3,opt,name=y_value,json=yValue" json:"y_value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SampleFloat) Reset()                    { *m = SampleFloat{} }
func (m *SampleFloat) String() string            { return proto.CompactTextString(m) }
func (*SampleFloat) ProtoMessage()               {}
func (*SampleFloat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SampleFloat) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *SampleFloat) GetXValue() float32 {
	if m != nil && m.XValue != nil {
		return *m.XValue
	}
	return 0
}

func (m *SampleFloat) GetYValue() float32 {
	if m != nil && m.YValue != nil {
		return *m.YValue
	}
	return 0
}

type Graph struct {
	Title            *string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Xtitle           *string   `protobuf:"bytes,2,opt,name=xtitle" json:"xtitle,omitempty"`
	Ytitle           *string   `protobuf:"bytes,3,opt,name=ytitle" json:"ytitle,omitempty"`
	Data             []*Sample `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	XScale           *uint32   `protobuf:"varint,5,opt,name=x_scale,json=xScale,def=1" json:"x_scale,omitempty"`
	YScale           *uint32   `protobuf:"varint,6,opt,name=y_scale,json=yScale,def=1" json:"y_scale,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (m *Graph) String() string            { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_Graph_XScale uint32 = 1
const Default_Graph_YScale uint32 = 1

func (m *Graph) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Graph) GetXtitle() string {
	if m != nil && m.Xtitle != nil {
		return *m.Xtitle
	}
	return ""
}

func (m *Graph) GetYtitle() string {
	if m != nil && m.Ytitle != nil {
		return *m.Ytitle
	}
	return ""
}

func (m *Graph) GetData() []*Sample {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Graph) GetXScale() uint32 {
	if m != nil && m.XScale != nil {
		return *m.XScale
	}
	return Default_Graph_XScale
}

func (m *Graph) GetYScale() uint32 {
	if m != nil && m.YScale != nil {
		return *m.YScale
	}
	return Default_Graph_YScale
}

type GraphFloat struct {
	Title            *string        `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Xtitle           *string        `protobuf:"bytes,2,opt,name=xtitle" json:"xtitle,omitempty"`
	Ytitle           *string        `protobuf:"bytes,3,opt,name=ytitle" json:"ytitle,omitempty"`
	Data             []*SampleFloat `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	XScale           *uint32        `protobuf:"varint,5,opt,name=x_scale,json=xScale,def=1" json:"x_scale,omitempty"`
	YScale           *uint32        `protobuf:"varint,6,opt,name=y_scale,json=yScale,def=1" json:"y_scale,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GraphFloat) Reset()                    { *m = GraphFloat{} }
func (m *GraphFloat) String() string            { return proto.CompactTextString(m) }
func (*GraphFloat) ProtoMessage()               {}
func (*GraphFloat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_GraphFloat_XScale uint32 = 1
const Default_GraphFloat_YScale uint32 = 1

func (m *GraphFloat) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *GraphFloat) GetXtitle() string {
	if m != nil && m.Xtitle != nil {
		return *m.Xtitle
	}
	return ""
}

func (m *GraphFloat) GetYtitle() string {
	if m != nil && m.Ytitle != nil {
		return *m.Ytitle
	}
	return ""
}

func (m *GraphFloat) GetData() []*SampleFloat {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GraphFloat) GetXScale() uint32 {
	if m != nil && m.XScale != nil {
		return *m.XScale
	}
	return Default_GraphFloat_XScale
}

func (m *GraphFloat) GetYScale() uint32 {
	if m != nil && m.YScale != nil {
		return *m.YScale
	}
	return Default_GraphFloat_YScale
}

// The following relate to the timelining functionality.
type Event struct {
	Timestamp *uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Source    *string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	// The name of the object which this event is talking about.
	Subject *string `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	// The type of this event.
	Type *string         `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Stat *jobs.StatEntry `protobuf:"bytes,5,opt,name=stat" json:"stat,omitempty"`
	// The sequential number of this event as stored in the time series.
	Id               *uint32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Event) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Event) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *Event) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *Event) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Event) GetStat() *jobs.StatEntry {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *Event) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Sample)(nil), "Sample")
	proto.RegisterType((*SampleFloat)(nil), "SampleFloat")
	proto.RegisterType((*Graph)(nil), "Graph")
	proto.RegisterType((*GraphFloat)(nil), "GraphFloat")
	proto.RegisterType((*Event)(nil), "Event")
}

func init() { proto.RegisterFile("grr/proto/analysis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x65, 0xc7, 0x71, 0xd4, 0x09, 0x70, 0x58, 0x45, 0x60, 0x15, 0x09, 0xad, 0xc2, 0x25,
	0x5c, 0x5c, 0xb5, 0x47, 0x38, 0x51, 0xa5, 0xe9, 0x0d, 0xa1, 0x0d, 0x45, 0xe2, 0x84, 0x26, 0xc9,
	0x36, 0xd9, 0xca, 0xf1, 0x5a, 0xbb, 0x93, 0x2a, 0xfb, 0x08, 0xbc, 0x06, 0x67, 0x1e, 0x83, 0x27,
	0x81, 0xd7, 0xe0, 0x80, 0x76, 0xd7, 0x71, 0xcb, 0x01, 0x09, 0x89, 0xde, 0xfc, 0xff, 0xdf, 0xec,
	0xef, 0x7f, 0x06, 0x8a, 0xb5, 0x31, 0x27, 0x8d, 0xd1, 0xa4, 0x4f, 0xb0, 0xc6, 0xca, 0x59, 0x65,
	0xcb, 0x20, 0x8f, 0x47, 0x77, 0xe4, 0x46, 0x2f, 0x0e, 0xee, 0xbd, 0x79, 0x2b, 0xb7, 0x58, 0x93,
	0x5a, 0x46, 0x32, 0x7e, 0x0f, 0xf9, 0x1c, 0xb7, 0x4d, 0x25, 0xd9, 0x08, 0xfa, 0x15, 0x2e, 0x64,
	0x55, 0x24, 0x3c, 0x99, 0x1c, 0x89, 0x28, 0xd8, 0x33, 0x18, 0xec, 0x3f, 0xdf, 0x62, 0xb5, 0x93,
	0x45, 0xca, 0x93, 0x49, 0x26, 0xf2, 0xfd, 0x47, 0xaf, 0x3c, 0x70, 0x2d, 0xe8, 0x45, 0xe0, 0x02,
	0x18, 0x5f, 0xc1, 0x30, 0x26, 0xce, 0x2a, 0x8d, 0xf4, 0x6f, 0xb1, 0xe9, 0xdf, 0x62, 0xd3, 0x2e,
	0xf6, 0x6b, 0x02, 0xfd, 0x4b, 0x83, 0xcd, 0xc6, 0x27, 0x92, 0xa2, 0x4a, 0x1e, 0x12, 0x83, 0x60,
	0x4f, 0x21, 0xdf, 0x47, 0x3b, 0x0d, 0x76, 0xab, 0xbc, 0xef, 0xa2, 0xdf, 0x8b, 0x7e, 0x54, 0xec,
	0x39, 0x64, 0x2b, 0x24, 0x2c, 0x32, 0xde, 0x9b, 0x0c, 0xcf, 0x06, 0x65, 0xec, 0x2c, 0x82, 0xc9,
	0x8e, 0x7d, 0x3d, 0xbb, 0xc4, 0x4a, 0x16, 0x7d, 0x9e, 0x4c, 0x1e, 0xbf, 0x4e, 0x4e, 0x45, 0xbe,
	0x9f, 0x7b, 0xc3, 0x33, 0xd7, 0xb2, 0xbc, 0x63, 0x2e, 0xb0, 0xf1, 0xb7, 0x04, 0x20, 0x94, 0xec,
	0x76, 0x7f, 0x80, 0xa6, 0xfc, 0x8f, 0xa6, 0x8f, 0xca, 0x7b, 0xd7, 0xfd, 0xcf, 0xba, 0x5f, 0x52,
	0xe8, 0x5f, 0xdc, 0xca, 0x9a, 0xd8, 0x25, 0x1c, 0x91, 0xda, 0x4a, 0x4b, 0xb8, 0x6d, 0x42, 0xdb,
	0xec, 0xfc, 0xd5, 0x8f, 0x5f, 0x3f, 0xbf, 0x27, 0x2f, 0x61, 0x28, 0xa6, 0xb3, 0x29, 0x92, 0xf4,
	0x9c, 0x8d, 0x3e, 0x6c, 0x24, 0x97, 0xfe, 0x09, 0xef, 0xe6, 0x4b, 0x71, 0xf7, 0x96, 0x7d, 0x82,
	0xdc, 0xea, 0x9d, 0x59, 0xb6, 0xcb, 0x9d, 0xbf, 0x0d, 0x29, 0x6f, 0x20, 0x17, 0xd3, 0xd9, 0x95,
	0x78, 0xc7, 0x4e, 0x7d, 0xc0, 0xce, 0xd4, 0x5c, 0x5f, 0x73, 0xda, 0x48, 0xae, 0x8d, 0x5a, 0xab,
	0x1a, 0x49, 0xd5, 0x6b, 0xae, 0x17, 0x37, 0x72, 0x49, 0xfc, 0x5a, 0x1b, 0x4e, 0x1b, 0x65, 0xe3,
	0x7f, 0x4a, 0xd1, 0x06, 0xb2, 0x02, 0x06, 0x76, 0x17, 0x46, 0xda, 0x03, 0x1d, 0x24, 0x63, 0x90,
	0x91, 0x6b, 0x64, 0x91, 0x05, 0x3b, 0x7c, 0xb3, 0x17, 0x90, 0x59, 0x42, 0x0a, 0x07, 0x19, 0x9e,
	0x41, 0x39, 0x27, 0xa4, 0x8b, 0x9a, 0x8c, 0x13, 0xc1, 0x67, 0x4f, 0x20, 0x55, 0xab, 0x78, 0x12,
	0x91, 0xaa, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xa8, 0x9d, 0xd0, 0x53, 0x03, 0x00,
	0x00,
}
