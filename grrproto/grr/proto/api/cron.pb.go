// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grr/proto/api/cron.proto

/*
Package cron is a generated protocol buffer package.

It is generated from these files:
	grr/proto/api/cron.proto

It has these top-level messages:
	ApiCronJob
	ApiListCronJobsArgs
	ApiListCronJobsResult
	ApiGetCronJobArgs
	ApiForceRunCronJobArgs
	ApiModifyCronJobArgs
	ApiListCronJobFlowsArgs
	ApiGetCronJobFlowArgs
	ApiDeleteCronJobArgs
*/
package cron

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import flows "github.com/google/grr_go_api_client/grrproto/grr/proto/flows_proto"
import _ "github.com/google/grr_go_api_client/grrproto/grr/proto/semantic_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ApiCronJob_State int32

const (
	ApiCronJob_ENABLED  ApiCronJob_State = 0
	ApiCronJob_DISABLED ApiCronJob_State = 1
)

var ApiCronJob_State_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
}
var ApiCronJob_State_value = map[string]int32{
	"ENABLED":  0,
	"DISABLED": 1,
}

func (x ApiCronJob_State) Enum() *ApiCronJob_State {
	p := new(ApiCronJob_State)
	*p = x
	return p
}
func (x ApiCronJob_State) String() string {
	return proto.EnumName(ApiCronJob_State_name, int32(x))
}
func (x *ApiCronJob_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApiCronJob_State_value, data, "ApiCronJob_State")
	if err != nil {
		return err
	}
	*x = ApiCronJob_State(value)
	return nil
}
func (ApiCronJob_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Next id: 13
type ApiCronJob struct {
	Urn              *string               `protobuf:"bytes,1,opt,name=urn" json:"urn,omitempty"`
	Description      *string               `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	FlowName         *string               `protobuf:"bytes,3,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	FlowArgs         *google_protobuf.Any  `protobuf:"bytes,4,opt,name=flow_args,json=flowArgs" json:"flow_args,omitempty"`
	FlowRunnerArgs   *flows.FlowRunnerArgs `protobuf:"bytes,5,opt,name=flow_runner_args,json=flowRunnerArgs" json:"flow_runner_args,omitempty"`
	Periodicity      *uint64               `protobuf:"varint,6,opt,name=periodicity" json:"periodicity,omitempty"`
	Lifetime         *uint64               `protobuf:"varint,7,opt,name=lifetime" json:"lifetime,omitempty"`
	AllowOverruns    *bool                 `protobuf:"varint,8,opt,name=allow_overruns,json=allowOverruns" json:"allow_overruns,omitempty"`
	State            *ApiCronJob_State     `protobuf:"varint,9,opt,name=state,enum=ApiCronJob_State" json:"state,omitempty"`
	LastRunTime      *uint64               `protobuf:"varint,10,opt,name=last_run_time,json=lastRunTime" json:"last_run_time,omitempty"`
	IsFailing        *bool                 `protobuf:"varint,11,opt,name=is_failing,json=isFailing" json:"is_failing,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ApiCronJob) Reset()                    { *m = ApiCronJob{} }
func (m *ApiCronJob) String() string            { return proto.CompactTextString(m) }
func (*ApiCronJob) ProtoMessage()               {}
func (*ApiCronJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApiCronJob) GetUrn() string {
	if m != nil && m.Urn != nil {
		return *m.Urn
	}
	return ""
}

func (m *ApiCronJob) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ApiCronJob) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *ApiCronJob) GetFlowArgs() *google_protobuf.Any {
	if m != nil {
		return m.FlowArgs
	}
	return nil
}

func (m *ApiCronJob) GetFlowRunnerArgs() *flows.FlowRunnerArgs {
	if m != nil {
		return m.FlowRunnerArgs
	}
	return nil
}

func (m *ApiCronJob) GetPeriodicity() uint64 {
	if m != nil && m.Periodicity != nil {
		return *m.Periodicity
	}
	return 0
}

func (m *ApiCronJob) GetLifetime() uint64 {
	if m != nil && m.Lifetime != nil {
		return *m.Lifetime
	}
	return 0
}

func (m *ApiCronJob) GetAllowOverruns() bool {
	if m != nil && m.AllowOverruns != nil {
		return *m.AllowOverruns
	}
	return false
}

func (m *ApiCronJob) GetState() ApiCronJob_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ApiCronJob_ENABLED
}

func (m *ApiCronJob) GetLastRunTime() uint64 {
	if m != nil && m.LastRunTime != nil {
		return *m.LastRunTime
	}
	return 0
}

func (m *ApiCronJob) GetIsFailing() bool {
	if m != nil && m.IsFailing != nil {
		return *m.IsFailing
	}
	return false
}

type ApiListCronJobsArgs struct {
	Offset           *int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Count            *int64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ApiListCronJobsArgs) Reset()                    { *m = ApiListCronJobsArgs{} }
func (m *ApiListCronJobsArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiListCronJobsArgs) ProtoMessage()               {}
func (*ApiListCronJobsArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApiListCronJobsArgs) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ApiListCronJobsArgs) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type ApiListCronJobsResult struct {
	Items            []*ApiCronJob `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	TotalCount       *int64        `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ApiListCronJobsResult) Reset()                    { *m = ApiListCronJobsResult{} }
func (m *ApiListCronJobsResult) String() string            { return proto.CompactTextString(m) }
func (*ApiListCronJobsResult) ProtoMessage()               {}
func (*ApiListCronJobsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApiListCronJobsResult) GetItems() []*ApiCronJob {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ApiListCronJobsResult) GetTotalCount() int64 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

type ApiGetCronJobArgs struct {
	CronJobId        *string `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiGetCronJobArgs) Reset()                    { *m = ApiGetCronJobArgs{} }
func (m *ApiGetCronJobArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiGetCronJobArgs) ProtoMessage()               {}
func (*ApiGetCronJobArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ApiGetCronJobArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

type ApiForceRunCronJobArgs struct {
	CronJobId        *string `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiForceRunCronJobArgs) Reset()                    { *m = ApiForceRunCronJobArgs{} }
func (m *ApiForceRunCronJobArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiForceRunCronJobArgs) ProtoMessage()               {}
func (*ApiForceRunCronJobArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApiForceRunCronJobArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

type ApiModifyCronJobArgs struct {
	CronJobId        *string           `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	State            *ApiCronJob_State `protobuf:"varint,2,opt,name=state,enum=ApiCronJob_State" json:"state,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ApiModifyCronJobArgs) Reset()                    { *m = ApiModifyCronJobArgs{} }
func (m *ApiModifyCronJobArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiModifyCronJobArgs) ProtoMessage()               {}
func (*ApiModifyCronJobArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ApiModifyCronJobArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

func (m *ApiModifyCronJobArgs) GetState() ApiCronJob_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ApiCronJob_ENABLED
}

type ApiListCronJobFlowsArgs struct {
	CronJobId        *string `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	Offset           *int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Count            *int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiListCronJobFlowsArgs) Reset()                    { *m = ApiListCronJobFlowsArgs{} }
func (m *ApiListCronJobFlowsArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiListCronJobFlowsArgs) ProtoMessage()               {}
func (*ApiListCronJobFlowsArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ApiListCronJobFlowsArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

func (m *ApiListCronJobFlowsArgs) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ApiListCronJobFlowsArgs) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type ApiGetCronJobFlowArgs struct {
	CronJobId        *string `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	FlowId           *string `protobuf:"bytes,2,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiGetCronJobFlowArgs) Reset()                    { *m = ApiGetCronJobFlowArgs{} }
func (m *ApiGetCronJobFlowArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiGetCronJobFlowArgs) ProtoMessage()               {}
func (*ApiGetCronJobFlowArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ApiGetCronJobFlowArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

func (m *ApiGetCronJobFlowArgs) GetFlowId() string {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return ""
}

type ApiDeleteCronJobArgs struct {
	CronJobId        *string `protobuf:"bytes,1,opt,name=cron_job_id,json=cronJobId" json:"cron_job_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiDeleteCronJobArgs) Reset()                    { *m = ApiDeleteCronJobArgs{} }
func (m *ApiDeleteCronJobArgs) String() string            { return proto.CompactTextString(m) }
func (*ApiDeleteCronJobArgs) ProtoMessage()               {}
func (*ApiDeleteCronJobArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ApiDeleteCronJobArgs) GetCronJobId() string {
	if m != nil && m.CronJobId != nil {
		return *m.CronJobId
	}
	return ""
}

func init() {
	proto.RegisterType((*ApiCronJob)(nil), "ApiCronJob")
	proto.RegisterType((*ApiListCronJobsArgs)(nil), "ApiListCronJobsArgs")
	proto.RegisterType((*ApiListCronJobsResult)(nil), "ApiListCronJobsResult")
	proto.RegisterType((*ApiGetCronJobArgs)(nil), "ApiGetCronJobArgs")
	proto.RegisterType((*ApiForceRunCronJobArgs)(nil), "ApiForceRunCronJobArgs")
	proto.RegisterType((*ApiModifyCronJobArgs)(nil), "ApiModifyCronJobArgs")
	proto.RegisterType((*ApiListCronJobFlowsArgs)(nil), "ApiListCronJobFlowsArgs")
	proto.RegisterType((*ApiGetCronJobFlowArgs)(nil), "ApiGetCronJobFlowArgs")
	proto.RegisterType((*ApiDeleteCronJobArgs)(nil), "ApiDeleteCronJobArgs")
	proto.RegisterEnum("ApiCronJob_State", ApiCronJob_State_name, ApiCronJob_State_value)
}

func init() { proto.RegisterFile("grr/proto/api/cron.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0x93, 0x26, 0x75, 0xc6, 0x69, 0xda, 0x4e, 0x93, 0x66, 0x4b, 0x55, 0xfa, 0x6a, 0x0a,
	0x0d, 0x55, 0xd9, 0x54, 0x55, 0x81, 0x43, 0x25, 0x22, 0x3b, 0x6e, 0x8a, 0x4b, 0xeb, 0x4a, 0xdb,
	0x54, 0x08, 0x24, 0x64, 0x8d, 0x77, 0xdf, 0xda, 0xd3, 0xae, 0x67, 0xac, 0x99, 0xd9, 0xb8, 0xbe,
	0x21, 0x71, 0x80, 0x13, 0x67, 0x7e, 0x00, 0xbf, 0x83, 0x13, 0xbf, 0x84, 0xfe, 0x04, 0xae, 0x1c,
	0xd0, 0xbc, 0xb5, 0xe3, 0x4d, 0x01, 0x09, 0x91, 0xdb, 0xee, 0xbe, 0xf7, 0x7d, 0xef, 0xdb, 0xf7,
	0xbe, 0x79, 0xc3, 0xc2, 0x81, 0x31, 0xbb, 0x63, 0xa3, 0x9d, 0xde, 0x15, 0x63, 0xb9, 0x9b, 0x18,
	0xad, 0x22, 0x7a, 0x7d, 0xf7, 0xca, 0x40, 0xeb, 0x41, 0x8e, 0x65, 0xb0, 0x5f, 0x64, 0xbb, 0x42,
	0x4d, 0x67, 0xa1, 0xad, 0x05, 0x28, 0xcb, 0xf5, 0xc4, 0xce, 0x3e, 0x57, 0xb8, 0x2c, 0x8e, 0x84,
	0x72, 0x32, 0x29, 0x23, 0x8d, 0x37, 0x35, 0xc6, 0x9a, 0x63, 0xb9, 0x6f, 0xb4, 0x7a, 0xac, 0xfb,
	0x7c, 0x97, 0x2d, 0x17, 0x46, 0x85, 0x01, 0x04, 0x3b, 0x6b, 0xad, 0x6b, 0xbf, 0xff, 0xf9, 0xe6,
	0xb7, 0x60, 0x9b, 0xad, 0xc6, 0xed, 0x83, 0x17, 0x71, 0x97, 0x9f, 0xf3, 0x59, 0xf0, 0x52, 0xf7,
	0xe1, 0x45, 0xdc, 0x8d, 0x62, 0x9f, 0xc9, 0xf7, 0x58, 0x3d, 0x45, 0x9b, 0x18, 0x39, 0x76, 0x52,
	0xab, 0x70, 0xa9, 0x0a, 0xe4, 0x5b, 0xc7, 0x80, 0x4a, 0x4e, 0x14, 0x57, 0x11, 0xfc, 0x3e, 0x5b,
	0xf3, 0x4a, 0x7b, 0x4a, 0x8c, 0x30, 0x5c, 0x26, 0xf8, 0x36, 0xc1, 0x2f, 0xf2, 0xf3, 0x04, 0xf7,
	0x51, 0xf0, 0xd1, 0x28, 0xae, 0xf9, 0xe7, 0xae, 0x18, 0x21, 0xff, 0x76, 0x86, 0x12, 0x66, 0x60,
	0xc3, 0x33, 0x10, 0xec, 0xd4, 0xef, 0x6d, 0x46, 0x65, 0x5b, 0xa2, 0x79, 0x5b, 0xa2, 0xa6, 0x9a,
	0xb6, 0x6e, 0x13, 0xd7, 0x4d, 0xbe, 0xb9, 0xe0, 0x12, 0x66, 0x50, 0x8c, 0x50, 0x39, 0x1b, 0xdd,
	0x5e, 0x7f, 0x84, 0xae, 0x69, 0x06, 0x76, 0x3f, 0x17, 0xd6, 0x96, 0xf4, 0xfe, 0x95, 0x7f, 0xcd,
	0x2e, 0x10, 0xbd, 0x29, 0x94, 0x42, 0x53, 0x56, 0x59, 0xa1, 0x2a, 0xe7, 0xa3, 0x83, 0x5c, 0x4f,
	0x62, 0xfa, 0xee, 0x53, 0x5b, 0xef, 0x51, 0x81, 0x90, 0x5f, 0xf6, 0xdf, 0xa1, 0x04, 0x54, 0x4a,
	0xc4, 0x1b, 0xd9, 0x89, 0x7c, 0xfe, 0x8c, 0xd5, 0xc7, 0x68, 0xa4, 0x4e, 0x65, 0x22, 0xdd, 0x34,
	0x5c, 0x85, 0x60, 0xe7, 0x4c, 0xeb, 0x63, 0x22, 0xb9, 0xc5, 0x6a, 0xed, 0xc2, 0x08, 0x6a, 0xcb,
	0xd5, 0x8e, 0x72, 0x68, 0x8e, 0x44, 0x0e, 0x7d, 0x74, 0x13, 0x44, 0x05, 0xde, 0x00, 0x9e, 0xdf,
	0x46, 0x71, 0x95, 0x81, 0xff, 0xb2, 0xc4, 0x6a, 0xb9, 0xcc, 0xd0, 0xc9, 0x11, 0x86, 0x67, 0x89,
	0xee, 0x87, 0x25, 0xe2, 0xfb, 0x6e, 0xa9, 0x42, 0xf8, 0x47, 0xf0, 0x85, 0x9e, 0x40, 0xae, 0xd5,
	0x00, 0x50, 0x24, 0x43, 0xcf, 0x04, 0x3a, 0x03, 0x37, 0xc4, 0x92, 0xd9, 0x0e, 0x75, 0x91, 0xa7,
	0xd0, 0x47, 0x10, 0x79, 0xae, 0x27, 0x98, 0x82, 0xd3, 0x3e, 0x29, 0x82, 0xb8, 0x50, 0x16, 0xdc,
	0x50, 0x38, 0xc0, 0xd7, 0x09, 0x62, 0x0a, 0xf3, 0x6a, 0x30, 0x91, 0xb9, 0xd7, 0x07, 0xaf, 0x64,
	0x9e, 0x63, 0x1a, 0xc1, 0xe1, 0x50, 0x5a, 0x90, 0x16, 0x12, 0x3d, 0x1a, 0xe7, 0xd2, 0x37, 0x40,
	0x98, 0x29, 0xf4, 0x0b, 0x07, 0xa9, 0xcc, 0x32, 0x34, 0xa8, 0x9c, 0x67, 0xad, 0xa8, 0x07, 0x8c,
	0x06, 0x11, 0x48, 0x57, 0x16, 0xb5, 0x50, 0xd8, 0x59, 0x59, 0xef, 0x1a, 0x0b, 0x13, 0xc4, 0x57,
	0xf9, 0xb4, 0x2c, 0xbe, 0x10, 0x58, 0x96, 0x03, 0x49, 0xea, 0xa7, 0xe0, 0xc4, 0x2b, 0x84, 0x91,
	0x36, 0xe8, 0xf3, 0x14, 0x08, 0xc8, 0x70, 0x02, 0x43, 0x5d, 0x18, 0x1b, 0xc5, 0xc7, 0x9d, 0xe1,
	0x43, 0xb6, 0x41, 0x35, 0x7a, 0xfa, 0x08, 0x8d, 0x6f, 0x63, 0x58, 0x83, 0x60, 0xa7, 0xd6, 0x6a,
	0x52, 0xab, 0x1e, 0xf0, 0xcf, 0x3a, 0x19, 0x38, 0x53, 0xe0, 0x1d, 0x48, 0xb5, 0xba, 0xe5, 0xa8,
	0x08, 0x75, 0x67, 0x6c, 0xf0, 0x48, 0xea, 0xc2, 0x92, 0x2a, 0x99, 0x81, 0xc2, 0x09, 0x68, 0x85,
	0x60, 0x9d, 0x30, 0xce, 0x46, 0x61, 0x10, 0x9f, 0x23, 0xe2, 0x67, 0x33, 0x5e, 0xde, 0x66, 0x2b,
	0xd6, 0x09, 0x87, 0xe1, 0x1a, 0x04, 0x3b, 0x1b, 0xf7, 0x2e, 0x46, 0x8b, 0xf3, 0x15, 0x3d, 0xf7,
	0x81, 0xd6, 0x55, 0xaa, 0xb9, 0xc5, 0x2f, 0xed, 0x17, 0x86, 0x9a, 0x42, 0xbe, 0x24, 0x50, 0x14,
	0x97, 0x60, 0xfe, 0x0d, 0x3b, 0x97, 0x0b, 0xeb, 0xbc, 0x05, 0x7b, 0x34, 0x5a, 0x46, 0xa3, 0xfd,
	0x94, 0xa0, 0x77, 0x59, 0x3d, 0x6e, 0x1f, 0xb4, 0x85, 0x2b, 0xff, 0xed, 0xc6, 0x13, 0x61, 0x1d,
	0x94, 0x23, 0x19, 0xa2, 0x02, 0xe7, 0xe7, 0x90, 0xcc, 0xcf, 0x9e, 0x11, 0xfe, 0xcc, 0x79, 0xb2,
	0xb8, 0x50, 0x87, 0x3e, 0xff, 0x4b, 0xc6, 0xa4, 0xed, 0x65, 0x42, 0xe6, 0x52, 0x0d, 0xc2, 0x3a,
	0xf5, 0xe1, 0x0e, 0x11, 0x7f, 0xc8, 0x6f, 0x76, 0xec, 0x5b, 0xf8, 0x44, 0x2b, 0xeb, 0x84, 0x72,
	0xf9, 0x14, 0x66, 0x90, 0xbd, 0x78, 0x4d, 0xda, 0x83, 0xf2, 0xb9, 0xd1, 0x60, 0x2b, 0xf4, 0x57,
	0xbc, 0xce, 0xce, 0x3e, 0xec, 0x36, 0x5b, 0x4f, 0x1e, 0xb6, 0x2f, 0xbc, 0xc3, 0xd7, 0x59, 0xad,
	0xdd, 0x79, 0x5e, 0xbe, 0x05, 0x8d, 0x1f, 0x03, 0x76, 0xa9, 0x39, 0x96, 0x4f, 0xa4, 0x75, 0xb3,
	0x4e, 0x58, 0x3a, 0x0c, 0x77, 0xd9, 0xaa, 0xce, 0x32, 0x8b, 0x8e, 0x36, 0xce, 0x72, 0x2b, 0x24,
	0x11, 0x9c, 0x5f, 0x78, 0xee, 0x9b, 0x2b, 0xd5, 0x00, 0xca, 0x70, 0x14, 0xcf, 0xf2, 0xf8, 0x1e,
	0x5b, 0x49, 0x74, 0xa1, 0x1c, 0x6d, 0x9a, 0xe5, 0xd6, 0x47, 0x04, 0x78, 0x9f, 0xdf, 0x78, 0x2a,
	0x5e, 0x83, 0x2a, 0x46, 0x7d, 0x34, 0xde, 0xd5, 0x73, 0xed, 0xe4, 0xa6, 0x0c, 0x5d, 0x32, 0x8c,
	0xe2, 0x12, 0xd7, 0xf8, 0x29, 0x60, 0x5b, 0x6f, 0x49, 0x89, 0xd1, 0x16, 0xb9, 0xe3, 0x9f, 0xb0,
	0x15, 0xe9, 0x70, 0x64, 0xc3, 0x00, 0x96, 0x77, 0xea, 0xf7, 0xea, 0x95, 0xb9, 0xb5, 0x38, 0xd5,
	0x59, 0xe7, 0x6c, 0xbe, 0xd1, 0x6c, 0x14, 0x97, 0xd9, 0xfc, 0x73, 0x56, 0x77, 0xda, 0x89, 0xbc,
	0x57, 0xd5, 0x75, 0xbc, 0x01, 0x0f, 0x7d, 0x08, 0x28, 0xe4, 0x85, 0x11, 0x24, 0x8a, 0x19, 0x21,
	0xf6, 0x49, 0x50, 0x87, 0x5d, 0x6c, 0x8e, 0xe5, 0x23, 0x9c, 0xcb, 0xa1, 0xc6, 0xdc, 0x67, 0x75,
	0xff, 0x0f, 0xbd, 0x97, 0xba, 0xdf, 0x93, 0xe9, 0x6c, 0x1f, 0x6f, 0x12, 0xe9, 0x06, 0x5f, 0x3f,
	0x5e, 0xab, 0x32, 0x8d, 0xe2, 0xb5, 0xa4, 0xc4, 0x75, 0xd2, 0x46, 0x97, 0x5d, 0x6e, 0x8e, 0xe5,
	0x81, 0x36, 0x09, 0xc6, 0x85, 0x3a, 0x3d, 0xdf, 0xcf, 0x01, 0xdb, 0x6c, 0x8e, 0xe5, 0x53, 0x9d,
	0xca, 0x6c, 0x7a, 0x6a, 0x3a, 0xfe, 0x78, 0x7e, 0x30, 0x96, 0xfe, 0xed, 0x60, 0xdc, 0x20, 0x8a,
	0xab, 0xfc, 0x4a, 0x17, 0x27, 0x0b, 0x03, 0x12, 0x08, 0x8e, 0x44, 0x5e, 0x1c, 0x1f, 0x8f, 0xc6,
	0xaf, 0x01, 0xdb, 0x3e, 0x39, 0x46, 0xbf, 0x7f, 0xed, 0x29, 0xd4, 0x2d, 0xbc, 0xb8, 0xf4, 0x1f,
	0xbd, 0xf8, 0x60, 0xee, 0xc5, 0x65, 0x02, 0x7c, 0x40, 0x80, 0xeb, 0xfc, 0xda, 0x49, 0x2f, 0xd2,
	0x3d, 0xfc, 0x77, 0x1f, 0x7e, 0x5f, 0xfa, 0x70, 0x31, 0xf7, 0x83, 0xf9, 0xe5, 0xf3, 0xff, 0xe4,
	0xdf, 0x67, 0x67, 0xe9, 0xca, 0x92, 0xe9, 0xec, 0x12, 0x9e, 0x2d, 0x19, 0xb6, 0xe6, 0x2d, 0x91,
	0xeb, 0x49, 0x27, 0xe5, 0x35, 0xba, 0xa3, 0x3c, 0x70, 0x35, 0xa3, 0x2f, 0x8d, 0xaf, 0x68, 0xc0,
	0x6d, 0xcc, 0xd1, 0x61, 0x75, 0xc0, 0x7b, 0xff, 0xa4, 0xe1, 0x3a, 0x31, 0x5e, 0xe1, 0xdb, 0x87,
	0x43, 0x04, 0x99, 0x9e, 0xb8, 0x3e, 0x5e, 0xea, 0x7e, 0x55, 0xce, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x79, 0xe0, 0x62, 0x1f, 0xbe, 0x08, 0x00, 0x00,
}
